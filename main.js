(()=>{"use strict";var e={28:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),c=n(645),a=n.n(c)()(o());a.push([e.id,':root {\n  --blue: rgb(83, 127, 231);\n  --skyblue: rgb(192, 238, 242);\n  --light-blue: rgb(192, 238, 242);\n}\nhtml, body {\n  width: 100%;\n  height: 100%;\n}\n.main-container {\n    min-width: 10rem;\n    background-color: rgb(255, 255, 255);\n    height: 30rem;\n  }\n  h1 {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--blue);\n  }\n  .project-section {\n    background-color:white;\n    height: 100%;\n  }\n  \n  .project-form {\n    display: flex;\n  }\n\n.rendered-projects,\n.rendered-tasks {\n  display: flex;\n  gap: 1rem;\n  flex-direction: column;\n}\n  .sec-container {\n    background-color: white;\n    display: grid;\n    grid-template-columns: 1fr 3fr;\n   height: 100%;\n   \n  }\n.rendered-div{\n  display: flex;\n \n\n}\n  /* both rendered tasks & projects style */\n  .rendered-project-title,\n  .rendered-task-title {\n   border-style: none;\n  }\n\ninput:focus {\n  outline-style: none;\n  /* border: 2px solid rgb(124, 164, 250); */\n}\n\n.editable:focus {\n  border: 2px solid rgb(124, 164, 250);\n \n}\n\ninput {\n  cursor: pointer;\n}\n\ninput[type="checkbox"]{\nwidth: 4em;\naccent-color: var(--blue);\n}\n\n.modal{\n  width: 12rem;\n  height: 10rem;\n }\n\n',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,yBAAyB;EACzB,6BAA6B;EAC7B,gCAAgC;AAClC;AACA;EACE,WAAW;EACX,YAAY;AACd;AACA;IACI,gBAAgB;IAChB,oCAAoC;IACpC,aAAa;EACf;EACA;IACE,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,kBAAkB;EACpB;EACA;IACE,sBAAsB;IACtB,YAAY;EACd;;EAEA;IACE,aAAa;EACf;;AAEF;;EAEE,aAAa;EACb,SAAS;EACT,sBAAsB;AACxB;EACE;IACE,uBAAuB;IACvB,aAAa;IACb,8BAA8B;GAC/B,YAAY;;EAEb;AACF;EACE,aAAa;;;AAGf;EACE,yCAAyC;EACzC;;GAEC,kBAAkB;EACnB;;AAEF;EACE,mBAAmB;EACnB,0CAA0C;AAC5C;;AAEA;EACE,oCAAoC;;AAEtC;;AAEA;EACE,eAAe;AACjB;;AAEA;AACA,UAAU;AACV,yBAAyB;AACzB;;AAEA;EACE,YAAY;EACZ,aAAa;CACd",sourcesContent:[':root {\n  --blue: rgb(83, 127, 231);\n  --skyblue: rgb(192, 238, 242);\n  --light-blue: rgb(192, 238, 242);\n}\nhtml, body {\n  width: 100%;\n  height: 100%;\n}\n.main-container {\n    min-width: 10rem;\n    background-color: rgb(255, 255, 255);\n    height: 30rem;\n  }\n  h1 {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--blue);\n  }\n  .project-section {\n    background-color:white;\n    height: 100%;\n  }\n  \n  .project-form {\n    display: flex;\n  }\n\n.rendered-projects,\n.rendered-tasks {\n  display: flex;\n  gap: 1rem;\n  flex-direction: column;\n}\n  .sec-container {\n    background-color: white;\n    display: grid;\n    grid-template-columns: 1fr 3fr;\n   height: 100%;\n   \n  }\n.rendered-div{\n  display: flex;\n \n\n}\n  /* both rendered tasks & projects style */\n  .rendered-project-title,\n  .rendered-task-title {\n   border-style: none;\n  }\n\ninput:focus {\n  outline-style: none;\n  /* border: 2px solid rgb(124, 164, 250); */\n}\n\n.editable:focus {\n  border: 2px solid rgb(124, 164, 250);\n \n}\n\ninput {\n  cursor: pointer;\n}\n\ninput[type="checkbox"]{\nwidth: 4em;\naccent-color: var(--blue);\n}\n\n.modal{\n  width: 12rem;\n  height: 10rem;\n }\n\n'],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,c){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var i=this[s][0];null!=i&&(a[i]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&a[l[0]]||(void 0!==c&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=c),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),c="/*# ".concat(o," */");return[t].concat([c]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var c={},a=[],s=0;s<e.length;s++){var i=e[s],d=r.base?i[0]+r.base:i[0],l=c[d]||0,u="".concat(d," ").concat(l);c[d]=l+1;var p=n(u),A={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var m=o(A,r);r.byIndex=s,t.splice(s,0,{identifier:u,updater:m,references:1})}a.push(u)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var c=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<c.length;a++){var s=n(c[a]);t[s].references--}for(var i=r(e,o),d=0;d<c.length;d++){var l=n(c[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}c=i}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var c=n.sourceMap;c&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var c=t[r]={id:r,exports:{}};return e[r](c,c.exports,n),c.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),c=n(569),a=n.n(c),s=n(565),i=n.n(s),d=n(216),l=n.n(d),u=n(589),p=n.n(u),A=n(28),m={};m.styleTagTransform=p(),m.setAttributes=i(),m.insert=a().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=l(),t()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;class f{constructor(e,t){this.title=e,this.dueDate=t,this.doneStatus=!1,this.id=crypto.randomUUID()}toggleDoneStatus(){this.doneStatus=!this.doneStatus}}JSON.parse(localStorage.getItem("storageTaskArr"))?.map((e=>Object.assign(new f,e)));const h=document.querySelector(".rendered-tasks");console.log(h);class C{constructor(e,t){this.title=e,this.dueDate=t,this.doneStatus=!1,this.id=crypto.randomUUID(),this.task=[]}toggleDoneStatus(){this.doneStatus=!this.doneStatus}}const g=JSON.parse(localStorage.getItem("storageProjectsArr"))?.map((e=>Object.assign(new C,e)))??[];class v extends C{constructor(e,t,n){super(e,t),this.notes=n}}const E=document.querySelector(".task-section"),y=document.createElement("div");function b(e){const t=t=>{const r=document.createElement("div");r.classList.add("rendered-div"),r.setAttribute("id",`${t.id}`),y.prepend(r);const o=document.createElement("input");o.setAttribute("type","checkbox"),t.doneStatus&&o.setAttribute("checked","checked"),r.appendChild(o),o.addEventListener("click",(()=>{!function(e){e.doneStatus=!e.doneStatus}(t),localStorage.setItem("storageProjectsArr",JSON.stringify(g))}));const c=document.createElement("input");c.classList.add("rendered-task-title"),c.setAttribute("readonly","readonly"),c.value=t.title,r.appendChild(c),c.addEventListener("dblclick",(()=>{c.classList.add("editable"),c.focus(),c.readOnly=!1})),c.addEventListener("click",(()=>{o.click()})),c.addEventListener("keypress",(e=>{"Enter"===e.key&&(e.preventDefault(),a.click())}));const a=document.createElement("button");a.textContent="edit",r.appendChild(a),a.addEventListener("click",(()=>{!function(e,t){t.title=e.value,localStorage.setItem("storageProjectsArr",JSON.stringify(g))}(c,t),n(e)}));const s=document.createElement("button");s.textContent="delete",r.appendChild(s);const i=t.id;s.addEventListener("click",(()=>{!function(t){const n=e.task.findIndex((e=>e.id===t));e.task.splice(n,1),localStorage.setItem("storageProjectsArr",JSON.stringify(g))}(i),n(e)}));const d=document.createElement("div");d.textContent="notes",d.classList.add("notes-div"),r.appendChild(d);const l=document.createElement("dialog");l.classList.add("modal"),document.body.appendChild(l);const u=document.createElement("div");l.appendChild(u);const p=document.createElement("form");p.classList.add("notes-form"),u.appendChild(p);const A=document.createElement("textarea"),m=document.createElement("button");m.textContent="add note",p.appendChild(A),p.appendChild(m),d.addEventListener("click",(()=>{l.showModal()})),m.addEventListener("click",(e=>{e.preventDefault();let n=A.value;!function(e,t){e.notes=t,localStorage.setItem("storageProjectsArr",JSON.stringify(g))}(t,n),console.log(t),l.close()}))};function n(e){for(;y.firstChild;)y.firstChild.remove();console.log(e.task),e.task.forEach(t)}n(e)}y.classList.add("rendered-tasks");const k=document.querySelector(".project-section"),S=document.querySelector(".rendered-projects"),x=document.querySelector(".project-form");function j(e){const t=document.createElement("div");t.classList.add("rendered-div"),S.prepend(t);const n=document.createElement("input");n.setAttribute("type","checkbox"),e.doneStatus&&n.setAttribute("checked","checked"),t.appendChild(n),t.classList.add("project-rendered"),t.setAttribute("id",`${e.id}`);const r=document.createElement("input");r.setAttribute("readonly","readonly"),r.value=e.title,r.classList.add("rendered-project-title","rendered-title"),t.appendChild(r),r.addEventListener("dblclick",(()=>{r.classList.add("editable"),r.focus(),r.readOnly=!1})),t.addEventListener("click",(()=>{!function(e){for(;E.firstChild;)E.firstChild.remove();!function(e){const t=document.createElement("h2");t.textContent=e.title,E.appendChild(t);const n=document.createElement("form");E.appendChild(n);const r=document.createElement("input");r.classList.add("task-title"),n.appendChild(r);const o=document.createElement("input");o.setAttribute("type","date"),o.classList.add("task-date"),n.appendChild(o);const c=document.createElement("button");c.classList.add("task-button"),c.textContent="add",n.appendChild(c),E.appendChild(y),c.addEventListener("click",(t=>{t.preventDefault(),""!==r.value&&(function(e){const t=document.querySelector(".task-title").value,n=document.querySelector(".task-date").value,r=new v(t,n);console.log(g),e.task.push(r),localStorage.setItem("storageProjectsArr",JSON.stringify(g))}(e),b(e)),r.value=""}))}(e)}(e),b(e)}));const o=document.createElement("button");o.textContent="edit",o.addEventListener("click",(()=>{!function(e,t){t.title=e.value,localStorage.setItem("storageProjectsArr",JSON.stringify(g))}(r,e),B()})),r.addEventListener("keypress",(e=>{"Enter"===e.key&&(e.preventDefault(),o.click())})),t.appendChild(o);const c=document.createElement("button");c.textContent="delete",t.appendChild(c),n.addEventListener("click",(t=>{t.stopPropagation(),e.toggleDoneStatus(),localStorage.setItem("storageProjectsArr",JSON.stringify(g))}));const a=e.id;c.addEventListener("click",(()=>{!function(e){const t=g.findIndex((t=>t.id===e));g.splice(t,1),localStorage.setItem("storageProjectsArr",JSON.stringify(g))}(a),B()}))}function B(){for(;S.firstChild;)S.firstChild.remove();console.log(g),g.forEach(j)}k.appendChild(x),k.appendChild(S);const I=document.querySelector(".add-btn"),L=document.querySelector(".project-title");document.querySelector(".rendered-projects"),B(),I.addEventListener("click",(e=>{e.preventDefault(),""!==L.value&&(function(){const e=document.querySelector(".project-title").value,t=document.querySelector(".project-date").value,n=new C(e,t);g.push(n),console.log(n),localStorage.setItem("storageProjectsArr",JSON.stringify(g))}(),B(),L.value="")})),L.addEventListener("keypress",(e=>{"Enter"===e.key&&(e.preventDefault(),I.click())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,