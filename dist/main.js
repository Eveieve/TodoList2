(()=>{"use strict";var e={28:(e,t,n)=>{n.d(t,{Z:()=>i});var o=n(537),r=n.n(o),c=n(645),a=n.n(c)()(r());a.push([e.id,"\n.main-container {\n    min-width: 10rem;\n    background-color: green;\n    height: 30rem;\n  }\n  \n  .project-section {\n    background-color: beige;\n    height: 100%;\n    \n   \n  }\n  \n  .sec-container {\n    background-color: aquamarine;\n    display: grid;\n    grid-template-columns: 1fr 3fr;\n   height: 100%;\n   \n  }\n  .project-title-rendered {\n background-color: bisque;\n  }\n\n.clicked-first-project,\n.clicked-project {\n    background-color: burlywood;\n  }\n\n  ","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:";AACA;IACI,gBAAgB;IAChB,uBAAuB;IACvB,aAAa;EACf;;EAEA;IACE,uBAAuB;IACvB,YAAY;;;EAGd;;EAEA;IACE,4BAA4B;IAC5B,aAAa;IACb,8BAA8B;GAC/B,YAAY;;EAEb;EACA;CACD,wBAAwB;EACvB;;AAEF;;IAEI,2BAA2B;EAC7B",sourcesContent:["\n.main-container {\n    min-width: 10rem;\n    background-color: green;\n    height: 30rem;\n  }\n  \n  .project-section {\n    background-color: beige;\n    height: 100%;\n    \n   \n  }\n  \n  .sec-container {\n    background-color: aquamarine;\n    display: grid;\n    grid-template-columns: 1fr 3fr;\n   height: 100%;\n   \n  }\n  .project-title-rendered {\n background-color: bisque;\n  }\n\n.clicked-first-project,\n.clicked-project {\n    background-color: burlywood;\n  }\n\n  "],sourceRoot:""}]);const i=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,c){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(a[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);o&&a[l[0]]||(void 0!==c&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=c),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),c="/*# ".concat(r," */");return[t].concat([c]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var c={},a=[],i=0;i<e.length;i++){var s=e[i],d=o.base?s[0]+o.base:s[0],l=c[d]||0,u="".concat(d," ").concat(l);c[d]=l+1;var p=n(u),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var m=r(f,o);o.byIndex=i,t.splice(i,0,{identifier:u,updater:m,references:1})}a.push(u)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var c=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<c.length;a++){var i=n(c[a]);t[i].references--}for(var s=o(e,r),d=0;d<c.length;d++){var l=n(c[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}c=s}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var c=n.sourceMap;c&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var c=t[o]={id:o,exports:{}};return e[o](c,c.exports,n),c.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),c=n(569),a=n.n(c),i=n(565),s=n.n(i),d=n(216),l=n.n(d),u=n(589),p=n.n(u),f=n(28),m={};m.styleTagTransform=p(),m.setAttributes=s(),m.insert=a().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=l(),t()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;class h{constructor(e,t){this.title=e,this.dueDate=t,this.doneStatus=!1,this.id=crypto.randomUUID()}toggleDoneStatus(){this.doneStatus=!this.doneStatus}}const g=JSON.parse(localStorage.getItem("storageTaskArr"))?.map((e=>Object.assign(new h,e)))??[],v=document.querySelector(".rendered-tasks");function A(e){const t=document.createElement("div");t.classList.add("task-rendered"),t.setAttribute("id",`${e.id}`),t.textContent=e.title,v.appendChild(t);const n=document.createElement("button");n.textContent="edit",t.appendChild(n);const o=document.createElement("button");o.textContent="delete",t.appendChild(o);const r=document.createElement("input");r.setAttribute("type","checkbox"),t.appendChild(r),r.addEventListener("click",(()=>{e.toggleDoneStatus(),localStorage.setItem("storageTaskArr",JSON.stringify(g))}));const c=e.id;o.addEventListener("click",(()=>{!function(e){const t=g.findIndex((t=>t.id===e));g.splice(t,1),localStorage.setItem("storageTaskArr",JSON.stringify(g))}(c),C()}))}function C(){for(;v.firstChild;)v.firstChild.remove();g.forEach(A)}console.log(v);class y{constructor(e,t){this.title=e,this.dueDate=t,this.doneStatus=!1,this.id=crypto.randomUUID(),this.task=[]}toggleDoneStatus(){this.doneStatus=!this.doneStatus}}const b=JSON.parse(localStorage.getItem("storageProjectsArr"))?.map((e=>Object.assign(new y,e)))??[],E=document.querySelector(".task-section"),k=document.createElement("div");function S(e){const t=n=>{const o=document.createElement("div");o.classList.add("task-rendered"),o.setAttribute("id",`${n.id}`),o.textContent=n.title,k.appendChild(o);const r=document.createElement("button");r.textContent="edit",o.appendChild(r);const c=document.createElement("button");c.textContent="delete",o.appendChild(c);const a=n.id;c.addEventListener("click",(()=>{for(function(t){const n=e.task.findIndex((e=>e.id===t));e.task.splice(n,1),localStorage.setItem("storageProjectsArr",JSON.stringify(b))}(a);k.firstChild;)k.firstChild.remove();e.task.forEach(t)}));const i=document.createElement("input");i.setAttribute("type","checkbox"),o.appendChild(i)};for(;k.firstChild;)k.firstChild.remove();e.task.forEach(t)}const I=document.querySelector(".rendered-projects");function x(e){const t=document.createElement("div");t.classList.add("project-title-rendered"),t.setAttribute("id",`${e.id}`),t.textContent=e.title,I.appendChild(t),t.addEventListener("click",(()=>{!function(e){for(;E.firstChild;)E.firstChild.remove();!function(e){const t=document.createElement("h2");t.textContent=e.title,E.appendChild(t);const n=document.createElement("form");E.appendChild(n);const o=document.createElement("input");o.classList.add("task-title"),n.appendChild(o);const r=document.createElement("input");r.setAttribute("type","date"),r.classList.add("task-date"),n.appendChild(r);const c=document.createElement("button");c.classList.add("task-button"),c.textContent="add",n.appendChild(c),E.appendChild(k),c.addEventListener("click",(t=>{t.preventDefault(),function(e){const t=document.querySelector(".task-title").value,n=document.querySelector(".task-date").value,o=new h(t,n);console.log(b),e.task.push(o),localStorage.setItem("storageProjectsArr",JSON.stringify(b))}(e),S(e)}))}(e)}(e),S(e)}));const n=document.createElement("button");n.textContent="edit",t.appendChild(n);const o=document.createElement("button");o.textContent="delete",t.appendChild(o);const r=document.createElement("input");r.setAttribute("type","checkbox"),t.appendChild(r),r.addEventListener("click",(()=>{e.toggleDoneStatus(),localStorage.setItem("storageProjectsArr",JSON.stringify(b))}));const c=e.id;o.addEventListener("click",(()=>{!function(e){const t=b.findIndex((t=>t.id===e));b.splice(t,1),localStorage.setItem("storageProjectsArr",JSON.stringify(b))}(c),j()}))}function j(){for(;I.firstChild;)I.firstChild.remove();console.log(b),b.forEach(x)}const B=document.querySelector(".add-btn"),w=document.querySelector(".project-title");j(),B.addEventListener("click",(()=>{!function(){const e=document.querySelector(".project-title").value,t=document.querySelector(".project-date").value,n=new y(e,t);b.push(n),console.log(n),localStorage.setItem("storageProjectsArr",JSON.stringify(b))}(),j(),w.value=""}));const L=document.querySelector(".task-add-btn"),q=document.querySelector(".task-title");C(),L.addEventListener("click",(()=>{!function(){const e=document.querySelector(".task-title").value,t=document.querySelector(".task-date").value,n=new h(e,t);g.push(n),console.log(g),localStorage.setItem("storageTaskArr",JSON.stringify(g))}(),C(),q.value=""}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,