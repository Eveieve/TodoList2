(()=>{var e={28:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),c=n(645),a=n.n(c)()(o());a.push([e.id,"\n.main-container {\n    min-width: 10rem;\n    background-color: green;\n    height: 30rem;\n  }\n  \n  .project-section {\n    background-color: beige;\n    height: 100%;\n    \n   \n  }\n  \n  .sec-container {\n    background-color: aquamarine;\n    display: grid;\n    grid-template-columns: 1fr 3fr;\n   height: 100%;\n   \n  }\n  .project-title-rendered {\n background-color: bisque;\n  }\n\n.clicked-first-project,\n.clicked-project {\n    background-color: burlywood;\n  }\n\n  ","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:";AACA;IACI,gBAAgB;IAChB,uBAAuB;IACvB,aAAa;EACf;;EAEA;IACE,uBAAuB;IACvB,YAAY;;;EAGd;;EAEA;IACE,4BAA4B;IAC5B,aAAa;IACb,8BAA8B;GAC/B,YAAY;;EAEb;EACA;CACD,wBAAwB;EACvB;;AAEF;;IAEI,2BAA2B;EAC7B",sourcesContent:["\n.main-container {\n    min-width: 10rem;\n    background-color: green;\n    height: 30rem;\n  }\n  \n  .project-section {\n    background-color: beige;\n    height: 100%;\n    \n   \n  }\n  \n  .sec-container {\n    background-color: aquamarine;\n    display: grid;\n    grid-template-columns: 1fr 3fr;\n   height: 100%;\n   \n  }\n  .project-title-rendered {\n background-color: bisque;\n  }\n\n.clicked-first-project,\n.clicked-project {\n    background-color: burlywood;\n  }\n\n  "],sourceRoot:""}]);const s=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,c){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var i=this[s][0];null!=i&&(a[i]=!0)}for(var d=0;d<e.length;d++){var u=[].concat(e[d]);r&&a[u[0]]||(void 0!==c&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=c),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),c="/*# ".concat(o," */");return[t].concat([c]).join("\n")}return[t].join("\n")}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var c={},a=[],s=0;s<e.length;s++){var i=e[s],d=r.base?i[0]+r.base:i[0],u=c[d]||0,l="".concat(d," ").concat(u);c[d]=u+1;var p=n(l),f={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var m=o(f,r);r.byIndex=s,t.splice(s,0,{identifier:l,updater:m,references:1})}a.push(l)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var c=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<c.length;a++){var s=n(c[a]);t[s].references--}for(var i=r(e,o),d=0;d<c.length;d++){var u=n(c[d]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}c=i}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var c=n.sourceMap;c&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},51:()=>{}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var c=t[r]={id:r,exports:{}};return e[r](c,c.exports,n),c.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{"use strict";var e=n(379),t=n.n(e),r=n(795),o=n.n(r),c=n(569),a=n.n(c),s=n(565),i=n.n(s),d=n(216),u=n.n(d),l=n(589),p=n.n(l),f=n(28),m={};m.styleTagTransform=p(),m.setAttributes=i(),m.insert=a().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=u(),t()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;class g{constructor(e,t){this.title=e,this.dueDate=t,this.doneStatus=!1,this.id=crypto.randomUUID()}toggleDoneStatus(){this.doneStatus=!this.doneStatus}}const h=JSON.parse(localStorage.getItem("storageTaskArr"))?.map((e=>Object.assign(new g,e)))??[],v=document.querySelector(".rendered-tasks");function A(e){const t=document.createElement("div");t.classList.add("task-rendered"),t.setAttribute("id",`${e.id}`),t.textContent=e.title,v.appendChild(t);const n=document.createElement("button");n.textContent="edit",t.appendChild(n);const r=document.createElement("button");r.textContent="delete",t.appendChild(r);const o=document.createElement("input");o.setAttribute("type","checkbox"),t.appendChild(o),o.addEventListener("click",(()=>{e.toggleDoneStatus(),localStorage.setItem("storageTaskArr",JSON.stringify(h))}));const c=e.id;r.addEventListener("click",(()=>{!function(e){const t=h.findIndex((t=>t.id===e));h.splice(t,1),localStorage.setItem("storageTaskArr",JSON.stringify(h))}(c),y()}))}function y(){for(;v.firstChild;)v.firstChild.remove();h.forEach(A)}console.log(v);class b{constructor(e,t){this.title=e,this.dueDate=t,this.doneStatus=!1,this.id=crypto.randomUUID(),this.task=[]}toggleDoneStatus(){this.doneStatus=!this.doneStatus}}const C=JSON.parse(localStorage.getItem("storageProjectsArr"))?.map((e=>Object.assign(new b,e)))??[];var S=n(51);const E=document.querySelector(".rendered-projects");function k(e){const t=document.createElement("div");t.classList.add("project-title-rendered"),t.setAttribute("id",`${e.id}`),t.textContent=e.title,E.appendChild(t),t.addEventListener("click",(()=>{(0,S.removeTaskSection)()}));const n=document.createElement("button");n.textContent="edit",t.appendChild(n);const r=document.createElement("button");r.textContent="delete",t.appendChild(r);const o=document.createElement("input");o.setAttribute("type","checkbox"),t.appendChild(o),o.addEventListener("click",(()=>{e.toggleDoneStatus(),localStorage.setItem("storageProjectsArr",JSON.stringify(C))})),E.firstElementChild.className="clicked-first-project";const c=e.id;r.addEventListener("click",(()=>{!function(e){const t=C.findIndex((t=>t.id===e));C.splice(t,1),localStorage.setItem("storageProjectsArr",JSON.stringify(C))}(c),I()}))}function I(){for(;E.firstChild;)E.firstChild.remove();console.log(C),C.forEach(k)}const j=document.querySelector(".add-btn"),x=document.querySelector(".project-title");I(),j.addEventListener("click",(()=>{!function(){const e=document.querySelector(".project-title").value,t=document.querySelector(".project-date").value,n=new b(e,t);C.push(n),console.log(n),localStorage.setItem("storageProjectsArr",JSON.stringify(C))}(),I(),x.value=""}));const B=document.querySelector(".task-add-btn"),w=document.querySelector(".task-title");y(),B.addEventListener("click",(()=>{!function(){const e=document.querySelector(".task-title").value,t=document.querySelector(".task-date").value,n=new g(e,t);h.push(n),console.log(h),localStorage.setItem("storageTaskArr",JSON.stringify(h))}(),y(),w.value=""}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,